meme central:memescript/compiler

requires ometa_base, io
where
  ometa_base = central:memescript/ometa_base
  io         = central:stdlib/io
import OMetaBase from ometa_base


//extending List for AST node information
class List < List
fields: start_line, end_line, start_col, end_col, text;
instance_method start_line: fun() {
  return @start_line;
}
instance_method end_line: fun() {
  return @end_line;
}
instance_method start_col: fun() {
  return @start_col;
}
instance_method end_col: fun() {
  return @end_col;
}
instance_method text: fun() {
  return @text;
}
instance_method toSource: fun() {
  var ret = super();
  // var pos = "@<" + @start_line.toString + ":" + @start_col.toString + ":" + @end_line.toString + ":" + @end_col.toString + ">";
  return ret;// + pos;
}
instance_method at: fun(parser, begin_pos) {
  var end_pos = parser.input.idx;
  var full_input = parser.input.data; //assert type == String?
  @text = full_input.substr(begin_pos, end_pos - begin_pos);
  @start_line = full_input.substr(0, begin_pos).count("\n") + parser.line_offset;

  @start_col = begin_pos - full_input.substr(0, begin_pos).rindex("\n") - 1;
  @end_line = @start_line + @text.count("\n");
  var inside_nl = @text.rindex("\n");
  if (inside_nl == -1) {
    @end_col = @start_col + @text.size;
  } else {
    @end_col = @text.substr(inside_nl, @text.size - inside_nl).size;
  }
}
instance_method +: fun(other) { //#[] + [] yields a Core.List. This is a workaround
  var ret = [];
  this.each(fun(_, x) { ret.append(x) });
  other.each(fun(_, x) { ret.append(x) });
  return ret;
}
instance_method extends: fun(other) {
  other.each(fun(_, x) { this.append(x) });
}
end

class MemeScriptParser < OMetaBase
fields: has_fun_literal, line_offset;
init new: fun(input) {
  super.new(input);
  @has_fun_literal = false;
  @line_offset = 0;
}
instance_method set_line_offset: fun(line_offset) {
  @line_offset = line_offset;
}
instance_method line_offset: fun() {
  return @line_offset;
}
instance_method last_or_empty: fun(lst) {
  if (lst.size > 0) {
    return lst.last;
  } else {
    return [];
  }
}
instance_method maybe_append_semicol_expr: fun(body, no_semicol_expr) {
  if(no_semicol_expr) {
    body.append([:expression, no_semicol_expr]);
  }
}


instance_method alpha: fun() {
  return this._or([fun() {
    this._apply_with_args(:seq, ["+"]);
  }, fun() {
    this._apply_with_args(:seq, ["*"]);
  }, fun() {
    this._apply_with_args(:seq, ["-"]);
  }, fun() {
    this._apply_with_args(:seq, ["/"]);
  }, fun() {
    this._apply_with_args(:seq, ["="]);
  }, fun() {
    this._apply_with_args(:seq, ["<"]);
  }, fun() {
    this._apply_with_args(:seq, [">"]);
  }, fun() {
    this._apply_with_args(:seq, ["?"]);
  }, fun() {
    this._apply_with_args(:seq, ["!"]);
  }, fun() {
    this._apply_with_args(:seq, ["&"]);
  }, fun() {
    this._apply_with_args(:seq, ["|"]);
  }]);
}
instance_method meme_keyword: fun() {
  return this._or([fun() {
    this._apply_with_args(:keyword,["fun"]);
  }, fun() {
    this._apply_with_args(:keyword,["var"]);
  }, fun() {
    this._apply_with_args(:keyword,["class"]);
  }, fun() {
    this._apply_with_args(:keyword,["fields"]);
  }]);
}
instance_method id: fun() {
  var i = null;
  this._apply(:spaces);
  this._not(fun() {
    this._apply(:meme_keyword);});
  i = this._apply(:identifier);
  return i;
}
instance_method alpha_name: fun() {
  var x = null;
  var xs = null;
  this._apply(:spaces);
  this._not(fun() {
    this._apply(:meme_keyword);});
  x = this._or([fun() {
    this._apply(:alpha);
  }, fun() {
    this._apply(:letter);
  }, fun() {
    this._apply_with_args(:seq, ["_"]);
  }]);
  xs = this._many(fun() {
    this._or([fun() {
      this._apply(:identifier_rest);
    }, fun() {
      this._apply(:alpha);
    }]);}, null);
  return ([x] + xs).join("");
}
instance_method symbol_name: fun() {
  var x = null;
  var xs = null;
  this._apply(:spaces);
  x = this._or([fun() {
    this._apply(:alpha);
  }, fun() {
    this._apply(:letter);
  }, fun() {
    this._apply_with_args(:seq, ["_"]);
  }]);
  xs = this._many(fun() {
    this._or([fun() {
      this._apply(:identifier_rest);
    }, fun() {
      this._apply_with_args(:seq, ["_"]);
    }, fun() {
      this._apply(:alpha);
    }]);}, null);
  xs.prepend(x);
  return xs.join("");
}
instance_method space: fun() {
  var c = null;
  return this._or([fun() {
    c = this._apply(:anything);
    this._pred(c.onlySpaces);
    return c;
  }, fun() {
    this._apply(:comment);
  }]);
}
instance_method comment: fun() {
  return this._or([fun() {
    this._apply_with_args(:seq, ["/*"]);
    this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["*/"]);});
        this._apply(:anything);
      }]);}, null);
    this._apply_with_args(:seq, ["*/"]);
  }, fun() {
    this._apply_with_args(:seq, ["//"]);
    this._many(fun() {
      this._or([fun() {
        this._not(fun() {
          this._apply_with_args(:seq, ["\n"]);});
        this._apply(:anything);
      }]);}, null);
    this._apply_with_args(:seq, ["\n"]);
  }]);
}
instance_method start: fun() {
  var c = null;
  var meta = null;
  var req = null;
  var code = null;
  this._apply_with_args(:seq, ["m"]);
  this._apply_with_args(:seq, ["e"]);
  this._apply_with_args(:seq, ["m"]);
  this._apply_with_args(:seq, ["e"]);
  this._apply(:space);
  c = this._apply(:compiler_line);
  meta = this._apply(:meta_section);
  req = this._apply(:requirements_section);
  code = this._apply(:code_section);
  this._apply(:spaces);
  this._apply(:end);
  return [:module, c, meta, req, code];
}
instance_method compiler_line: fun() {
  var xs = null;
  xs = this._many1(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\n"]);});
      this._apply(:anything);
    }]);});
  return xs.join("");
}
instance_method meta_section: fun() {
  var xs = null;
  xs = this._many(fun() {
    this._apply(:meta_variable);}, null);
  return [:meta, xs];
}
instance_method meta_variable: fun() {
  var key = null;
  var xs = null;
  this._apply(:spaces);
  this._apply_with_args(:seq, ["@"]);
  this._apply(:spaces);
  key = this._apply(:id);
  this._apply_with_args(:token, [":"]);
  xs = this._many1(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\n"]);});
      this._apply(:anything);
    }]);});
  return [key, xs.join("")];
}
instance_method requirements_section: fun() {
  var params = null;
  var specs = null;
  var imp = null;
  return this._or([fun() {
    this._apply_with_args(:keyword,["requires"]);
    params = this._apply(:module_params);
    specs = this._apply(:where_section);
    imp = this._many(fun() {
      this._apply(:module_import);}, null);
    return [:requirements, params, [:default-locations, specs], [:imports, imp]];
  }, fun() {
    return [:requirements, [], [:default-locations, []], [:imports, []]];
  }]);
}
instance_method where_section: fun() {
  return this._or([fun() {
    this._apply_with_args(:keyword,["where"]);
    this._many(fun() {
      this._apply(:module_default);}, null);
  }, fun() {
    return [];
  }]);
}
instance_method module_params: fun() {
  var x = null;
  var xs = null;
  x = this._apply(:id);
  xs = this._many(fun() {
    this._or([fun() {
      this._apply_with_args(:token, [","]);
      this._apply(:id);
    }]);}, null);
  return [x] + xs;
}
instance_method module_default: fun() {
  var name = null;
  var loc = null;
  name = this._apply(:id);
  this._apply_with_args(:token, ["="]);
  this._apply(:spaces);
  loc = this._apply(:module_location);
  return [name, loc];
}
instance_method module_location: fun() {
  var xs = null;
  xs = this._many1(fun() {
    this._or([fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\n"]);});
      this._apply(:anything);
    }]);});
  return xs.join("");
}
instance_method module_import: fun() {
  var name = null;
  var lib = null;
  this._apply_with_args(:keyword,["import"]);
  name = this._apply(:id);
  this._apply_with_args(:keyword,["from"]);
  lib = this._apply(:id);
  return [name, lib];
}
instance_method code_section: fun() {
  var d = null;
  d = this._many(fun() {
    this._apply(:module_decl);}, null);
  return [:code, d];
}
instance_method module_decl: fun() {
  return this._or([fun() {
    this._apply(:obj_decl);
  }, fun() {
    this._apply(:class_decl);
  }, fun() {
    this._apply(:top_level_fun);
  }, fun() {
    this._apply(:top_level_fn);
  }]);
}
instance_method obj_decl: fun() {
  var name = null;
  var s = null;
  var f = null;
  this._apply_with_args(:keyword,["object"]);
  name = this._apply(:id);
  s = this._many1(fun() {
    this._apply(:object_slot);});
  f = this._apply(:obj_fun);
  this._apply_with_args(:keyword,["end"]);
  return [:object, name, s, f];
}
instance_method obj_fun: fun() {
  var f = null;
  return this._or([fun() {
    this._apply_with_args(:keyword,["functions"]);
    this._apply_with_args(:token, ["{"]);
    f = this._many1(fun() {
      this._or([fun() {
        this._apply(:constructor);
      }, fun() {
        this._apply(:top_level_fun);
      }]);});
    this._apply_with_args(:token, ["}"]);
    return f;
  }, fun() {
    return [];
  }]);
}
instance_method object_slot: fun() {
  var name = null;
  var value = null;
  name = this._apply(:id);
  this._apply_with_args(:token, [":"]);
  value = this._or([fun() {
    this._apply(:literal);
  }, fun() {
    this._apply(:id);
  }]);
  this._apply_with_args(:token, [";"]);
  return [:slot, name, value];
}
instance_method class_decl: fun() {
  var name = null;
  var parent = null;
  var f = null;
  var c = null;
  var im = null;
  var cm = null;
  this._apply_with_args(:keyword,["class"]);
  name = this._apply(:id);
  parent = this._or([fun() {
    this._apply_with_args(:token, ["<"]);
    this._apply(:id);
  }, fun() {
    this._apply_with_args(:token, ["<"]);
    this._apply_with_args(:token, ["null"]);
  }, fun() {
    return "Object";
  }]);
  f = this._apply(:fields_);
  c = this._apply(:constructors);
  im = this._many(fun() {
    this._apply(:instance_method_decl);}, null);
  cm = this._many(fun() {
    this._apply(:class_method_decl);}, null);
  this._apply_with_args(:keyword,["end"]);
  return [:class, [name, parent], f, c, im, cm];
}
instance_method fields_: fun() {
  var xs = null;
  return this._or([fun() {
    this._apply_with_args(:keyword,["fields"]);
    this._apply_with_args(:token, [":"]);
    xs = this._apply(:idlist);
    this._apply_with_args(:token, [";"]);
    return [:fields, xs];
  }, fun() {
    return [:fields, []];
  }]);
}
instance_method constructors: fun() {
  var c = null;
  c = this._many(fun() {
    this._apply(:constructor);}, null);
  return [:ctors, c];
}
instance_method constructor: fun() {
  var name = null;
  var p = null;
  var body = null;
  var e = null;
  @has_fun_literal = false;
  this._apply_with_args(:keyword,["init"]);
  name = this._apply(:alpha_name);
  this._apply_with_args(:token, [":"]);
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["fun"]);
  p = this._apply(:fparams);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:top_fun_body);
  e = this._apply(:end_body);
  return [:ctor, name, [:params, p],
                  @has_fun_literal, [:body,  body + [e]]].at(this, _pos);
}
instance_method top_level_fn: fun() {
  var name = null;
  var e = null;
  name = this._apply(:alpha_name);
  this._apply_with_args(:token, [":"]);
  this._apply(:spaces);
  var _pos = this.input.idx();
  e = this._apply(:expr);
  this._apply_with_args(:token, [";"]);
  return [:fun, name, [:params, []], false, [:body, [[:return, e]].at(this, _pos)].at(this, _pos)].at(this, _pos);
}
instance_method top_level_fun: fun() {
  var name = null;
  var r = null;
  this._apply(:spaces);
  @has_fun_literal = false;
  name = this._apply(:alpha_name);
  this._apply_with_args(:token, [":"]);
  this._apply(:spaces);
  r = this._apply_with_args(:fun_rest, [name]);
  return r;
}
instance_method fun_rest: fun() {
  var p = null;
  var body = null;
  var e = null;
  var name = this._apply(:anything);
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["fun"]);
  p = this._apply(:fparams);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:top_fun_body);
  e = this._apply(:end_body);
  return [:fun, name, [:params, p],
                       @has_fun_literal, [:body,  body + [e]]].at(this, _pos);
}
instance_method end_body: fun() {
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:token, ["}"]);
  return [:end-body].at(this, _pos);
}
instance_method instance_method_decl: fun() {
  var name = null;
  var r = null;
  @has_fun_literal = false;
  this._apply_with_args(:keyword,["instance_method"]);
  name = this._apply(:alpha_name);
  this._apply_with_args(:token, [":"]);
  this._apply(:spaces);
  r = this._apply_with_args(:fun_rest, [name]);
  return r;
}
instance_method class_method_decl: fun() {
  var name = null;
  var r = null;
  @has_fun_literal = false;
  this._apply_with_args(:keyword,["class_method"]);
  name = this._apply(:alpha_name);
  this._apply_with_args(:token, [":"]);
  this._apply(:spaces);
  r = this._apply_with_args(:fun_rest, [name]);
  return r;
}
instance_method params: fun() {
  var xs = null;
  this._apply_with_args(:token, ["("]);
  xs = this._apply(:idlist);
  this._apply_with_args(:token, [")"]);
  return xs;
}
instance_method fparams: fun() {
  var x = null;
  var xs = null;
  var y = null;
  return this._or([fun() {
    this._apply_with_args(:token, ["("]);
    this._apply_with_args(:token, [")"]);
    return [];
  }, fun() {
    this._apply_with_args(:token, ["("]);
    this._apply_with_args(:token, ["*"]);
    x = this._apply(:id);
    this._apply_with_args(:token, [")"]);
    return [[:var-arg, x]];
  }, fun() {
    this._apply_with_args(:token, ["("]);
    x = this._apply(:id);
    xs = this._many(fun() {
      this._or([fun() {
        this._apply_with_args(:token, [","]);
        this._apply(:id);
      }]);}, null);
    this._apply_with_args(:token, [")"]);
    return [x] + xs;
  }, fun() {
    this._apply_with_args(:token, ["("]);
    x = this._apply(:id);
    xs = this._many(fun() {
      this._or([fun() {
        this._apply_with_args(:token, [","]);
        this._apply(:id);
      }]);}, null);
    y = this._apply(:pvar);
    this._apply_with_args(:token, [")"]);
    return [x] + xs + [y];
  }]);
}
instance_method pvar: fun() {
  var x = null;
  this._apply_with_args(:token, [","]);
  this._apply_with_args(:token, ["*"]);
  x = this._apply(:id);
  return [:var-arg, x];
}
instance_method idlist: fun() {
  var x = null;
  var xs = null;
  return this._or([fun() {
    x = this._apply(:id);
    xs = this._many(fun() {
      this._or([fun() {
        this._apply_with_args(:token, [","]);
        this._apply(:id);
      }]);}, null);
    return [x] + xs;
  }, fun() {
    return [];
  }]);
}
instance_method top_fun_body: fun() {
  return this._or([fun() {
    this._apply(:primitive);
  }, fun() {
    this._apply(:stmts);
  }]);
}
instance_method primitive: fun() {
  var s = null;
  this._apply_with_args(:token, ["<primitive"]);
  this._apply(:spaces);
  s = this._apply(:lit_string);
  this._apply_with_args(:token, [">"]);
  return [[:primitive, s]];
}
instance_method stmts: fun() {
  var s = null;
  s = this._many(fun() {
    this._apply(:stmt);}, null);
  return s;
}
instance_method stmt: fun() {
  var e = null;
  return this._or([fun() {
    this._apply(:control_expr);
  }, fun() {
    e = this._apply(:non_control_expr);
    this._apply_with_args(:token, [";"]);
    return e;
  }]);
}
instance_method non_control_expr: fun() {
  var e = null;
  return this._or([fun() {
    this._apply(:expr_ret);
  }, fun() {
    this._apply(:expr_non_local_ret);
  }, fun() {
    this._apply(:expr_assign);
  }, fun() {
    e = this._apply(:expr);
    return [:expression, e];
  }, fun() {
    this._apply(:expr_decl);
  }]);
}
instance_method expr_ret: fun() {
  var e = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["return"]);
  e = this._apply(:expr);
  return [:return, e].at(this, _pos);
}
instance_method expr_non_local_ret: fun() {
  var e = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:token, ["^"]);
  e = this._apply(:expr);
  return [:non-local-return, e].at(this, _pos);
}
instance_method expr_decl: fun() {
  var name = null;
  var e = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["var"]);
  name = this._apply(:id);
  this._apply_with_args(:token, ["="]);
  e = this._apply(:expr);
  return [:var-def, name, e].at(this, _pos);
}
instance_method expr_assign: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    a = this._apply(:lhs);
    this._apply_with_args(:token, ["="]);
    b = this._apply(:expr);
    return [:=, a, b].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    a = this._apply(:lhs);
    this._apply_with_args(:token, ["+="]);
    b = this._apply(:expr);
    return [:=, a, [:+, a, b]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    a = this._apply(:lhs);
    this._apply_with_args(:token, ["-="]);
    b = this._apply(:expr);
    return [:=, a, [:-, a, b]].at(this, _pos);
  }]);
}
instance_method lhs: fun() {
  var r = null;
  var x = null;
  return this._or([fun() {
    r = this._apply(:expr);
    this._pred(r.size > 0 and r[0] == :index);
    return r;
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    x = this._apply(:alpha_name);
    return [:id, x].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    x = this._apply(:field_name);
    return [:field, x].at(this, _pos);
  }]);
}
instance_method control_expr: fun() {
  return this._or([fun() {
    this._apply(:expr_if);
  }, fun() {
    this._apply(:expr_while);
  }, fun() {
    this._apply(:expr_try);
  }, fun() {
    this._apply(:expr_for);
  }]);
}
instance_method expr_for: fun() {
  var v = null;
  var c = null;
  var n = null;
  var st = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["for"]);
  this._apply_with_args(:token, ["("]);
  v = this._or([fun() {
    this._apply(:expr_decl);
  }, fun() {
    this._apply(:expr_assign);
  }]);
  this._apply_with_args(:token, [";"]);
  c = this._apply(:expr);
  this._apply_with_args(:token, [";"]);
  n = this._apply(:expr_assign);
  this._apply_with_args(:token, [")"]);
  this._apply_with_args(:token, ["{"]);
  st = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  return [:for, v, c, st, n];
}
instance_method expr_if: fun() {
  var e = null;
  var body = null;
  var elif_ = null;
  var else_ = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["if"]);
  this._apply_with_args(:token, ["("]);
  e = this._apply(:expr);
  this._apply_with_args(:token, [")"]);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  elif_ = this._many(fun() {
    this._apply(:expr_elif);}, null);
  else_ = this._opt(fun() {
    this._apply(:expr_else);});
  return [:if, e, body, elif_, else_ or []].at(this, _pos);
}
instance_method expr_elif: fun() {
  var e = null;
  var body = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["elif"]);
  this._apply_with_args(:token, ["("]);
  e = this._apply(:expr);
  this._apply_with_args(:token, [")"]);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  return [:elif, e, body].at(this, _pos);
}
instance_method expr_else: fun() {
  var body = null;
  this._apply_with_args(:keyword,["else"]);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  return body;
}
instance_method expr_while: fun() {
  var e = null;
  var xs = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["while"]);
  this._apply_with_args(:token, ["("]);
  e = this._apply(:expr);
  this._apply_with_args(:token, [")"]);
  this._apply_with_args(:token, ["{"]);
  xs = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  return [:while, e, xs].at(this, _pos);
}
instance_method expr_try: fun() {
  var s_try = null;
  var c = null;
  var s_catch = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["try"]);
  this._apply_with_args(:token, ["{"]);
  s_try = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  c = this._apply(:catch_part);
  this._apply_with_args(:token, ["{"]);
  s_catch = this._apply(:stmts);
  this._apply_with_args(:token, ["}"]);
  return [:try, s_try, c, s_catch].at(this, _pos);
}
instance_method catch_part: fun() {
  var id = null;
  var t = null;
  return this._or([fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["catch"]);
    this._apply_with_args(:token, ["("]);
    id = this._apply(:alpha_name);
    this._apply_with_args(:token, [")"]);
    return [:catch, id].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["catch"]);
    this._apply_with_args(:token, ["("]);
    t = this._apply(:catch_type);
    id = this._apply(:alpha_name);
    this._apply_with_args(:token, [")"]);
    return [:catch, t, id].at(this, _pos);
  }]);
}
instance_method catch_type: fun() {
  var type = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  type = this._apply(:alpha_name);
  return [:id, type].at(this, _pos);
}
instance_method expr: fun() {
  var e = null;
  this._apply(:spaces);
  e = this._apply(:expr_or);
  return e;
}
instance_method expr_or: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_or);
    this._apply_with_args(:token, ["or"]);
    this._apply(:spaces);
    b = this._apply(:expr_and);
    return [:or, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_and);
  }]);
}
instance_method expr_and: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_and);
    this._apply_with_args(:token, ["and"]);
    this._apply(:spaces);
    b = this._apply(:expr_eq);
    return [:and, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_eq);
  }]);
}
instance_method expr_eq: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_eq);
    this._apply_with_args(:token, ["=="]);
    this._apply(:spaces);
    b = this._apply(:expr_rel);
    return [:==, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_eq);
    this._apply_with_args(:token, ["!="]);
    this._apply(:spaces);
    b = this._apply(:expr_rel);
    return [:!=, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_rel);
  }]);
}
instance_method expr_rel: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_rel);
    this._apply_with_args(:token, [">="]);
    this._apply(:spaces);
    b = this._apply(:expr_add);
    return [:>=, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_rel);
    this._apply_with_args(:token, [">"]);
    this._not(fun() {
      this._apply_with_args(:seq, [">"]);});
    this._apply(:spaces);
    b = this._apply(:expr_add);
    return [:>, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_rel);
    this._apply_with_args(:token, ["<="]);
    this._apply(:spaces);
    b = this._apply(:expr_add);
    return [:<=, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_rel);
    this._apply_with_args(:token, ["<"]);
    this._not(fun() {
      this._apply_with_args(:seq, ["<"]);});
    this._apply(:spaces);
    b = this._apply(:expr_add);
    return [:<, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_add);
  }]);
}
instance_method expr_add: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["++"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:++, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["+"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:+, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["-"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:-, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["<<"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:<<, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, [">>"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:>>, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["&"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:&, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_add);
    this._apply_with_args(:token, ["|"]);
    this._apply(:spaces);
    b = this._apply(:expr_mul);
    return [:|, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_mul);
  }]);
}
instance_method expr_mul: fun() {
  var a = null;
  var b = null;
  return this._or([fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_mul);
    this._apply_with_args(:token, ["*"]);
    this._apply(:spaces);
    b = this._apply(:expr_unary);
    return [:*, a, b].at(this, _pos);
  }, fun() {
        var _pos = this.input.idx();
    a = this._apply(:expr_mul);
    this._apply_with_args(:token, ["/"]);
    this._apply(:spaces);
    b = this._apply(:expr_unary);
    return [:/, a, b].at(this, _pos);
  }, fun() {
    this._apply(:expr_unary);
  }]);
}
instance_method expr_unary: fun() {
  var a = null;
  return this._or([fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["+"]);
    this._apply(:spaces);
    this._apply(:spaces);
    a = this._apply(:prim_expr);
    return [:positive, a].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["-"]);
    this._apply(:spaces);
    this._apply(:spaces);
    a = this._apply(:prim_expr);
    return [:negative, a].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["!"]);
    this._apply(:spaces);
    this._apply(:spaces);
    a = this._apply(:expr_unary);
    return [:not, a].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["~"]);
    this._apply(:spaces);
    this._apply(:spaces);
    a = this._apply(:expr_unary);
    return [:bit-neg, a].at(this, _pos);
  }, fun() {
    this._apply(:suffix_expr);
  }]);
}
instance_method suffix_expr: fun() {
  var sel = null;
  var p = null;
  var r = null;
  var i = null;
  return this._or([fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["super"]);
    this._apply_with_args(:token, ["."]);
    sel = this._apply(:alpha_name);
    p = this._apply(:args);
    return [:super-ctor-send, sel, [:args, p]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    r = this._apply(:suffix_expr);
    this._apply_with_args(:token, ["."]);
    sel = this._apply(:alpha_name);
    p = this._apply(:args);
    return [:send, r, sel, [:args, p]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    r = this._apply(:suffix_expr);
    this._apply_with_args(:token, ["."]);
    sel = this._apply(:alpha_name);
    return [:send, r, sel, [:args, []]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    r = this._apply(:suffix_expr);
    this._apply_with_args(:token, ["["]);
    i = this._apply(:expr);
    this._apply_with_args(:token, ["]"]);
    return [:index, r, i].at(this, _pos);
  }, fun() {
    this._apply(:call_expr);
  }]);
}
instance_method call_expr: fun() {
  var r = null;
  var p = null;
  return this._or([fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    r = this._apply(:call_expr);
    p = this._apply(:args);
    return [:call, r, [:args, p]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["super"]);
    p = this._apply(:args);
    return [:super-send, [:args, p]].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    r = this._apply(:id);
    p = this._apply(:args);
    return [:send-or-local-call, r, [:args, p]].at(this, _pos);
  }, fun() {
    this._apply(:prim_expr);
  }]);
}
instance_method prim_expr: fun() {
  var e = null;
  var x = null;
  return this._or([fun() {
    this._apply_with_args(:token, ["("]);
    e = this._apply(:expr);
    this._apply_with_args(:token, [")"]);
    return e;
  }, fun() {
    this._apply(:literal);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    x = this._apply(:field_name);
    return [:field, x].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    x = this._apply(:alpha_name);
    return [:id, x].at(this, _pos);
  }]);
}
instance_method pair_list: fun() {
  var x = null;
  var xs = null;
  return this._or([fun() {
    x = this._apply(:pair);
    xs = this._many(fun() {
      this._or([fun() {
        this._apply_with_args(:token, [","]);
        this._apply(:pair);
      }]);}, null);
    return [x] + xs;
  }, fun() {
    return [];
  }]);
}
instance_method pair: fun() {
  var key = null;
  var val = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  key = this._apply(:expr);
  this._apply_with_args(:token, [":"]);
  val = this._apply(:expr);
  return [:pair, key, val].at(this, _pos);
}
instance_method args: fun() {
  var p = null;
  this._apply_with_args(:token, ["("]);
  p = this._apply(:expr_list);
  this._apply_with_args(:token, [")"]);
  return p;
}
instance_method expr_list: fun() {
  var x = null;
  var xs = null;
  return this._or([fun() {
    x = this._apply(:expr);
    xs = this._many(fun() {
      this._or([fun() {
        this._apply_with_args(:token, [","]);
        this._apply(:expr);
      }]);}, null);
    return [x] + xs;
  }, fun() {
    return [];
  }]);
}
instance_method literal: fun() {
  var e = null;
  var x = null;
  return this._or([fun() {
    this._apply(:lit_number);
  }, fun() {
    this._apply(:lit_string);
  }, fun() {
    this._apply(:lit_symbol);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["["]);
    e = this._apply(:expr_list);
    this._apply_with_args(:token, ["]"]);
    return ([:literal-array].extends([e])).at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:token, ["{"]);
    e = this._apply(:pair_list);
    this._apply_with_args(:token, ["}"]);
    return ([:literal-dict]).at(this, _pos).extends(e);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["thisModule"]);
    return [:literal, :module].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["thisContext"]);
    return [:literal, :context].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["this"]);
    return [:literal, :this].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["null"]);
    return [:literal, :null].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["true"]);
    return [:literal, :true].at(this, _pos);
  }, fun() {
    this._apply(:spaces);
    var _pos = this.input.idx();
    this._apply_with_args(:keyword,["false"]);
    return [:literal, :false].at(this, _pos);
  }, fun() {
    x = this._apply(:funliteral);
    @has_fun_literal = true;
    return x;
  }]);
}
instance_method funliteral: fun() {
  var p = null;
  var body = null;
  var e = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["fun"]);
  p = this._apply(:params);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:funliteral_body);
  e = this._apply(:end_body);
  return [:fun-literal, [:params, p], [:body, body + [e]]].at(this, _pos);
}
instance_method funliteral_body: fun() {
  var body = null;
  var no_semicol_expr = null;
  var last = null;
  body = this._apply(:stmts);
  no_semicol_expr = this._opt(fun() {
    this._apply(:expr);});
  this.maybe_append_semicol_expr(body, no_semicol_expr);
  last = this.last_or_empty(body);
  this._apply_with_args(:rewrite_last_stmt, [last]);
  return body;
}
instance_method rewrite_last_stmt: fun() {
  var c = null;
  return this._or([fun() {
    c = this._form(fun() {
      this._apply_with_args(:exactly, [:expression]);
      this._apply(:anything);});
    return c.set(0, :return);
  }, fun() {
    this._apply(:anything);
  }]);
}
instance_method cfunliteral_body: fun() {
  var x = null;
  x = this._apply(:funliteral_body);
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply(:spaces);
  this._not(fun() {
    this._apply(:anything);});
  return x + [[:end-body].at(this, _pos)].at(this, _pos);
}
instance_method lit_symbol: fun() {
  var xs = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:token, [":"]);
  xs = this._apply(:symbol_name);
  return [:literal-symbol, xs].at(this, _pos);
}
instance_method lit_number: fun() {
  var x = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  x = this._or([fun() {
    this._apply(:base_10);
  }, fun() {
    this._apply(:base_16);
  }]);
  return [:literal-number, x].at(this, _pos);
}
instance_method base_10: fun() {
  var ds = null;
  ds = this._many1(fun() {
    this._apply(:digit);});
  this._not(fun() {
    this._apply(:letter);});
  return ds.join("").toInteger;
}
instance_method base_16: fun() {
  var xs = null;
  this._apply_with_args(:seq, ["0"]);
  this._apply_with_args(:seq, ["x"]);
  xs = this._many1(fun() {
    this._or([fun() {
      this._apply(:digit);
    }, fun() {
      this._apply_with_args(:seq, ["A"]);
    }, fun() {
      this._apply_with_args(:seq, ["B"]);
    }, fun() {
      this._apply_with_args(:seq, ["C"]);
    }, fun() {
      this._apply_with_args(:seq, ["D"]);
    }, fun() {
      this._apply_with_args(:seq, ["E"]);
    }, fun() {
      this._apply_with_args(:seq, ["F"]);
    }]);});
  this._not(fun() {
    this._apply(:letter);});
  return xs.join("").asHex;
}
instance_method lit_string: fun() {
  var xs = null;
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:seq, ["\""]);
  xs = this._many(fun() {
    this._or([fun() {
      this._apply(:lit_escaped);
    }, fun() {
      this._not(fun() {
        this._apply_with_args(:seq, ["\""]);});
      this._apply(:anything);
    }]);}, null);
  this._apply_with_args(:seq, ["\""]);
  return [:literal-string, xs.join("").escape].at(this, _pos);
}
instance_method lit_escaped: fun() {
  var x = null;
  this._not(fun() {
    this._apply_with_args(:seq, ["\""]);});
  this._apply_with_args(:seq, ["\\"]);
  x = this._apply(:anything);
  return "\\" + x;
}
instance_method field_name: fun() {
  var i = null;
  this._apply_with_args(:token, ["@"]);
  i = this._apply(:id);
  return i;
}
instance_method single_top_level_fun: fun() {
  var p = null;
  var body = null;
  var e = null;
  var name = this._apply(:anything);
  this._apply(:spaces);
  var _pos = this.input.idx();
  this._apply_with_args(:keyword,["fun"]);
  p = this._apply(:fparams);
  this._apply_with_args(:token, ["{"]);
  body = this._apply(:top_fun_body);
  e = this._apply(:end_body);
  return [:fun, name, [:params, p], false,
                              [:body, body + [e]]].at(this, _pos);
}


end //OMeta
